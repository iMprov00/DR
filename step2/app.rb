require 'telegram/bot'

token = '8380813420:AAE6iqxrLcpdFZbEKhjccr28rzVKisqJ1nc'

# –•—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_progress = {}

# –ó–∞–≥–∞–¥–∫–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
RIDDLES = [
  {
    question: "–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–π –ø–æ—á—Ç–∞–ª—å–æ–Ω -\n–ù–µ –º–∞–≥–≥–ª, –Ω–µ –≤–æ–ª—à–µ–±–Ω–∏–∫ –æ–Ω\n–•—Ä–∞–Ω–∏—Ç—å —É–º–µ–µ—Ç –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã\n–ù–µ—Å—ë—Ç –ø–æ—Å—ã–ª–∫—É –Ω–∞ –∫—Ä–∞–π —Å–≤–µ—Ç–∞.\n–ö—Ä—ã–ª–∞—Ç, –∏ —Å–º–µ–ª, –∏ –∑–æ—Ä–æ–∫ –æ–Ω\n–ö—Ç–æ –∂–µ —ç—Ç–æ—Ç –ø–æ—á—Ç–∞–ª—å–æ–Ω?",
    options: ["–§–µ–Ω–∏–∫—Å", "–°–æ–≤–∞", "–î–µ–º–µ–Ω—Ç–æ—Ä", "–ì–∏–ø–ø–æ–≥—Ä–∏—Ñ"],
    correct: 1
  },
  {
    question: "–¢–∞–π–Ω–∞—è —à–∫–æ–ª–∞ –Ω–∞ –∑–∞–º–æ–∫ –ø–æ—Ö–æ–∂–∞.\n–£—á–∞—Ç –≤ —Ç–æ–π —à–∫–æ–ª–µ –¥–µ—Ç–µ–π –∫–æ–ª–¥–æ–≤–∞—Ç—å.\n–¢—É–¥–∞ –Ω–µ –ø—Ä–æ–Ω–∏–∫–Ω–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–∂–∏–π.\n–°–∫–∞–∂–∏—Ç–µ-–∫–∞ –¥—Ä—É–∂–Ω–æ, –∫–∞–∫ —à–∫–æ–ª—É —Ç—É –∑–≤–∞—Ç—å?",
    options: ["–î—É—Ä–º—Å—Ç—Ä–∞–Ω–≥", "–•–æ–≥–≤–∞—Ä—Ç—Å", "–®–∞—Ä–º–±–∞—Ç–æ–Ω", "–ú–∞—Ö—É—Ç–æ–∫–æ—Ä"],
    correct: 1
  },
  {
    question: "–®—Ä–∞–º –≤ –≤–∏–¥–µ –º–æ–ª–Ω–∏–∏ –Ω–∞ –ª–±—É.\n–¢–æ—Ç –º–∞–ª—å—á–∏–∫ –º–æ–∂–µ—Ç –∫–æ–ª–¥–æ–≤–∞—Ç—å.\n–¢—ã –ø–æ–º–æ–≥–∏ —Å–∫–æ—Ä–µ–π –µ–º—É,\n–ù–∞–ø–æ–º–Ω–∏, –∫–∞–∫ –º–∞–ª—å—á–∏—à–∫—É –∑–≤–∞—Ç—å?",
    options: ["–†–æ–Ω –£–∏–∑–ª–∏", "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", "–ù–µ–≤–∏–ª–ª –õ–æ–Ω–≥–±–æ—Ç—Ç–æ–º", "–î—Ä–∞–∫–æ –ú–∞–ª—Ñ–æ–π"],
    correct: 1
  },
  {
    question: "–í –ª–∏–ª–æ–≤–æ–π –º–∞–Ω—Ç–∏–∏ —Å—Ç–∞—Ä–∏–∫,\n–ö –ª–∏–º–æ–Ω–Ω—ã–º –¥–æ–ª—å–∫–∞–º –æ–Ω –ø—Ä–∏–≤—ã–∫.",
    options: ["–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –°–Ω–µ–π–ø", "–î–∞–º–±–ª–¥–æ—Ä", "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –õ—é–ø–∏–Ω", "–ö–æ—Ä–Ω–µ–ª–∏—É—Å –§–∞–¥–∂"],
    correct: 1
  },
  {
    question: "–û–Ω –Ω–µ –ø—Ç–∏—Ü–∞ –∏ –Ω–µ –∑–≤–µ—Ä—å,\n–ù–æ –ª–µ—Ç–∞—Ç—å —É–º–µ–µ—Ç,\n–õ—é–±–∏—Ç –≤–µ–∂–ª–∏–≤—ã—Ö –ª—é–¥–µ–π.\n–û—Ç–≥–∞–¥–∞–π —Å–∫–æ—Ä–µ–µ,\n–ß—Ç–æ —ç—Ç–æ –∑–∞ —Å—É—â–µ—Å—Ç–≤–æ?\n–ù–∞–∑–æ–≤–∏ –±—ã—Å—Ç—Ä–µ–π –µ–≥–æ!",
    options: ["–í–∞—Å–∏–ª–∏—Å–∫", "–ì–∏–ø–ø–æ–≥—Ä–∏—Ñ", "–¢—Ä–æ–ª–ª—å", "–§–µ—Å—Ç—Ä–∞–ª"],
    correct: 1
  }
]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
def send_riddle(bot, chat_id, riddle_index)
  riddle = RIDDLES[riddle_index]
  
  buttons = riddle[:options].map.with_index do |option, index|
    Telegram::Bot::Types::InlineKeyboardButton.new(
      text: option,
      callback_data: "riddle_#{riddle_index}_#{index}"
    )
  end.each_slice(2).to_a # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏

  markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons)
  
  bot.api.send_message(
    chat_id: chat_id,
    text: "–ó–∞–≥–∞–¥–∫–∞ #{riddle_index + 1} –∏–∑ #{RIDDLES.size}:\n\n#{riddle[:question]}",
    reply_markup: markup
  )
end

def handle_riddle_answer(bot, message, user_progress)
  data_parts = message.data.split('_')
  riddle_index = data_parts[1].to_i
  answer_index = data_parts[2].to_i
  
  user_id = message.from.id
  riddle = RIDDLES[riddle_index]
  
  if answer_index == riddle[:correct]
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    bot.api.answer_callback_query(callback_query_id: message.id, text: "–í–µ—Ä–Ω–æ! ‚úÖ")
    
    sleep(1)
    
    if riddle_index + 1 < RIDDLES.size
      # –°–ª–µ–¥—É—é—â–∞—è –∑–∞–≥–∞–¥–∫–∞
      user_progress[user_id] ||= {}
      user_progress[user_id][:current_riddle] = riddle_index + 1
      bot.api.send_message(
        chat_id: user_id,
        text: "–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–∞ —á–∞—Å—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ... ü™Ñ"
      )
      sleep(2)
      send_riddle(bot, user_id, riddle_index + 1)
    else
      # –í—Å–µ –∑–∞–≥–∞–¥–∫–∏ —Ä–µ—à–µ–Ω—ã
      bot.api.send_message(
        chat_id: user_id,
        text: "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –í—Å–µ —á–∞—Å—Ç–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã! ‚ú®"
      )
      
      sleep(3)
      
      # –õ—é–ø–∏–Ω –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
      bot.api.send_message(
        chat_id: user_id,
        text: "*–†–µ–ª—É—Å–∏–æ –û—Å—Ç–∏—É–º!* - –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç –õ—é–ø–∏–Ω, –Ω–∞–ø—Ä–∞–≤–ª—è—è –ø–∞–ª–æ—á–∫—É –Ω–∞ –¥–≤–µ—Ä—å..."
      )
      
      sleep(2)
      
      # –î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è (–≥–∏—Ñ–∫–∞)
      bot.api.send_animation(
        chat_id: user_id,
        animation: Faraday::UploadIO.new('door_open.gif', 'image/gif')
      )
      
      sleep(2)
      
      # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π
      bot.api.send_message(
        chat_id: user_id,
        text: "–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞! –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω–æ–µ, –°—Ç–µ—à–∞! –ë–µ–∑ —Ç–µ–±—è —è –±—ã –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è.\n\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –°–µ–≤–µ—Ä—É—Å–æ–º –°–Ω–µ–π–ø–æ–º... –ù–æ —á—Ç–æ–±—ã –µ–≥–æ –Ω–∞–π—Ç–∏, —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∞! –ü–æ–∏—â–∏ –µ—ë –≤ —Å–≤–æ–µ–º —à–∫–∞–≤—á–∏–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–ª–µ –º–∞–≥–∏—á–µ—Å–∫–æ–π TV —Å–∫—Ä–∏–∂–∞–ª–∏.",
        parse_mode: 'Markdown'
      )
      
      # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      user_progress.delete(user_id)
    end
  else
    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    wrong_answer_messages = [
      "–ü–æ—á—Ç–∏, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, –Ω–æ –ø—Ä–∏—Å–º–æ—Ç—Ä–∏—Å—å –ø–æ–ª—É—á—à–µ...",
      "–•–º, –Ω–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ. –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –µ—â—ë...",
      "–û—à–∏–±–∏—Ç—å—Å—è –º–æ–∂–µ—Ç –∫–∞–∂–¥—ã–π! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
    ]
    
    bot.api.answer_callback_query(
      callback_query_id: message.id,
      text: wrong_answer_messages.sample
    )
  end
end

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
Telegram::Bot::Client.run(token) do |bot|
  bot.listen do |message|
    case message
    when Telegram::Bot::Types::Message
      case message.text
      when '/start'
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –õ—é–ø–∏–Ω–∞
        bot.api.send_animation(
          chat_id: message.chat.id,
          animation: Faraday::UploadIO.new('hello.gif', 'image/gif')
        )

        bot.api.send_message(
          chat_id: message.chat.id,
          text: "–ê, –°—Ç–µ—à–∞! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –Ø —Å–ª—ã—à–∞–ª, –•–∞–≥—Ä–∏–¥ —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–∏–ª. –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ–º–Ω–æ–≥–æ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–∞..."
        )
        
        sleep(2)
        
        # –®–æ–∫–æ–ª–∞–¥
        bot.api.send_photo(
          chat_id: message.chat.id,
          photo: Faraday::UploadIO.new('chocolate.jpg', 'image/jpg'),
          caption: "–í–æ—Ç, –≤–æ–∑—å–º–∏ —à–æ–∫–æ–ª–∞–¥–∫—É. –û—Ç–ª–∏—á–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ –¥–µ–º–µ–Ω—Ç–æ—Ä–æ–≤... –∏ –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–≤–æ–≥–∏ —Ç–æ–∂–µ."
        )
        
        sleep(3)
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        bot.api.send_photo(
          chat_id: message.chat.id,
          photo: Faraday::UploadIO.new('door.jpg', 'image/jpg'),
          caption: "–í–∏–¥–∏—à—å —ç—Ç—É –∑–∞–∫–æ–ª–¥–æ–≤–∞–Ω–Ω—É—é –¥–≤–µ—Ä—å? –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—ë, –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ.\n\n–Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≥–∞–¥–æ–∫ - –∫–∞–∂–¥–∞—è —Ä–∞–∑–≥–∞–¥–∫–∞ —Å—Ç–∞–Ω–µ—Ç —á–∞—Å—Ç—å—é –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. –ü–æ–º–æ–∂–µ—à—å –º–Ω–µ?"
        )

        sleep(4)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–≥–∞–¥–∫—É
        user_progress[message.chat.id] = { current_riddle: 0 }
        send_riddle(bot, message.chat.id, 0)

      when '/help'
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º. –ï—Å–ª–∏ –æ—à–∏–±—ë—à—å—Å—è - –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞!"
        )
      end

    when Telegram::Bot::Types::CallbackQuery
      if message.data.start_with?('riddle_')
        handle_riddle_answer(bot, message, user_progress)
      end
    end
  end
end